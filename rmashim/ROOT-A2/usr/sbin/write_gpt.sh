#!/bin/sh
# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This script is automatically generated by /mnt/host/source/src/scripts/build_library/cgpt_shell.sh.
# Do not edit!

if ! type numsectors >/dev/null 2>&1; then
  . "/usr/share/misc/chromeos-common.sh" || exit 1
fi
locate_gpt

# Usage: create_image <device> <min_disk_size>
# If <device> is a block device, wipes out the GPT
# If it's not, it creates a new file of the requested size
create_image() {
  local dev="$1"
  local min_disk_size="$2"

  if [ -b "${dev}" ]; then
    # Make sure block size is not greater than 8K. Otherwise the partition
    # start calculation won't fit.
    block_size=$(blocksize "${dev}")
    if [ "${block_size}" -gt 8192 ]; then
      echo "Destination blocksize too large. Only blocksizes of 8192 bytes and \
        smaller are supported." >&2
      exit 1
    fi

    # Zap any old partitions (otherwise gpt complains).
    dd if=/dev/zero of="${dev}" conv=notrunc bs=512 count=64
    dd if=/dev/zero of="${dev}" conv=notrunc bs=512 count=64 \
      seek=$(( min_disk_size / 512 - 64 ))
  else
    if [ ! -e "${dev}" ]; then
      # Align to 512 bytes
      min_disk_size=$(( (min_disk_size + 511) & ~511 ))
      truncate -s "${min_disk_size}" "${dev}"
    fi
  fi
}

write_base_table() {
  local target="$1"
  create_image "${target}" 10898978820
  local blocks
  block_size=$(blocksize "${target}")
  numsecs=$(numsectors "${target}")
  local curr=32768
  # Make sure Padding is block_size aligned.
  if [ $(( 0 & (block_size - 1) )) -gt 0 ]; then
    echo "Primary Entry Array padding is not block aligned." >&2
    exit 1
  fi
  # Create the GPT headers and tables. Pad the primary ones.
  ${GPT} create -p $(( 0 / block_size )) ${target}
  blocks=$(( 8388608 / block_size ))
  if [ $(( 8388608 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 11 -b $(( curr / block_size )) -s ${blocks} -t firmware     -l "RWFW" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 6 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-C" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 7 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-C" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 9 -b $(( curr / block_size )) -s ${blocks} -t reserved     -l "reserved" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 10 -b $(( curr / block_size )) -s ${blocks} -t reserved     -l "reserved" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 2062336 / block_size ))
  if [ $(( 2062336 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  : $(( curr += blocks * block_size ))
  blocks=$(( 16777216 / block_size ))
  if [ $(( 16777216 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 2 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-A" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 16777216 / block_size ))
  if [ $(( 16777216 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 4 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-B" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 16777216 / block_size ))
  if [ $(( 16777216 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 8 -b $(( curr / block_size )) -s ${blocks} -t data     -l "OEM" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 67108864 / block_size ))
  if [ $(( 67108864 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  : $(( curr += blocks * block_size ))
  blocks=$(( 33554432 / block_size ))
  if [ $(( 33554432 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 12 -b $(( curr / block_size )) -s ${blocks} -t efi     -l "EFI-SYSTEM" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 4294967296 / block_size ))
  if [ $(( 4294967296 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 5 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-B" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 4294967296 / block_size ))
  if [ $(( 4294967296 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 3 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-A" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( numsecs - (curr + 24576) / block_size ))
  ${GPT} add -i 1 -b $(( curr / block_size )) -s ${blocks} -t data     -l "STATE" ${target}
  ${GPT} add -i 2 -S 0 -T 15 -P 15 ${target}
  ${GPT} add -i 4 -S 0 -T 15 -P 0 ${target}
  ${GPT} add -i 6 -S 0 -T 15 -P 0 ${target}
  ${GPT} boot -p -b $2 -i 12 ${target}
  ${GPT} add -i 12 -B 1 ${target}
  ${GPT} show ${target}
}
load_base_vars() {
  DEFAULT_ROOTDEV="/sys/devices/pci0000:00/0000:00:02.4/0000:0*:00.0/mmc_host/mmc1/mmc1:0001/block/mmcblk1"
  PARTITION_SIZE_RWFW=8388608
    RESERVED_EBS_RWFW=0
       DATA_SIZE_RWFW=8388608
          FORMAT_RWFW=
       FS_FORMAT_RWFW=
      FS_OPTIONS_RWFW=""
   PARTITION_NUM_RWFW="11"
  PARTITION_SIZE_11=8388608
    RESERVED_EBS_11=0
       DATA_SIZE_11=8388608
          FORMAT_11=
       FS_FORMAT_11=
      FS_OPTIONS_11=""
   PARTITION_NUM_11="11"
  PARTITION_SIZE_KERN_C=1
    RESERVED_EBS_KERN_C=0
       DATA_SIZE_KERN_C=1
          FORMAT_KERN_C=
       FS_FORMAT_KERN_C=
      FS_OPTIONS_KERN_C=""
   PARTITION_NUM_KERN_C="6"
  PARTITION_SIZE_6=1
    RESERVED_EBS_6=0
       DATA_SIZE_6=1
          FORMAT_6=
       FS_FORMAT_6=
      FS_OPTIONS_6=""
   PARTITION_NUM_6="6"
  PARTITION_SIZE_ROOT_C=1
    RESERVED_EBS_ROOT_C=0
       DATA_SIZE_ROOT_C=1
          FORMAT_ROOT_C=
       FS_FORMAT_ROOT_C=
      FS_OPTIONS_ROOT_C=""
   PARTITION_NUM_ROOT_C="7"
  PARTITION_SIZE_7=1
    RESERVED_EBS_7=0
       DATA_SIZE_7=1
          FORMAT_7=
       FS_FORMAT_7=
      FS_OPTIONS_7=""
   PARTITION_NUM_7="7"
  PARTITION_SIZE_RESERVED=1
    RESERVED_EBS_RESERVED=0
       DATA_SIZE_RESERVED=1
          FORMAT_RESERVED=
       FS_FORMAT_RESERVED=
      FS_OPTIONS_RESERVED=""
   PARTITION_NUM_RESERVED="9"
  PARTITION_SIZE_9=1
    RESERVED_EBS_9=0
       DATA_SIZE_9=1
          FORMAT_9=
       FS_FORMAT_9=
      FS_OPTIONS_9=""
   PARTITION_NUM_9="9"
  PARTITION_SIZE_RESERVED=1
    RESERVED_EBS_RESERVED=0
       DATA_SIZE_RESERVED=1
          FORMAT_RESERVED=
       FS_FORMAT_RESERVED=
      FS_OPTIONS_RESERVED=""
   PARTITION_NUM_RESERVED="10"
  PARTITION_SIZE_10=1
    RESERVED_EBS_10=0
       DATA_SIZE_10=1
          FORMAT_10=
       FS_FORMAT_10=
      FS_OPTIONS_10=""
   PARTITION_NUM_10="10"
  PARTITION_SIZE_KERN_A=16777216
    RESERVED_EBS_KERN_A=0
       DATA_SIZE_KERN_A=16777216
          FORMAT_KERN_A=
       FS_FORMAT_KERN_A=
      FS_OPTIONS_KERN_A=""
   PARTITION_NUM_KERN_A="2"
  PARTITION_SIZE_2=16777216
    RESERVED_EBS_2=0
       DATA_SIZE_2=16777216
          FORMAT_2=
       FS_FORMAT_2=
      FS_OPTIONS_2=""
   PARTITION_NUM_2="2"
  PARTITION_SIZE_KERN_B=16777216
    RESERVED_EBS_KERN_B=0
       DATA_SIZE_KERN_B=16777216
          FORMAT_KERN_B=
       FS_FORMAT_KERN_B=
      FS_OPTIONS_KERN_B=""
   PARTITION_NUM_KERN_B="4"
  PARTITION_SIZE_4=16777216
    RESERVED_EBS_4=0
       DATA_SIZE_4=16777216
          FORMAT_4=
       FS_FORMAT_4=
      FS_OPTIONS_4=""
   PARTITION_NUM_4="4"
  PARTITION_SIZE_OEM=16777216
    RESERVED_EBS_OEM=0
       DATA_SIZE_OEM=16777216
          FORMAT_OEM=
       FS_FORMAT_OEM=ext4
      FS_OPTIONS_OEM=""
   PARTITION_NUM_OEM="8"
  PARTITION_SIZE_8=16777216
    RESERVED_EBS_8=0
       DATA_SIZE_8=16777216
          FORMAT_8=
       FS_FORMAT_8=ext4
      FS_OPTIONS_8=""
   PARTITION_NUM_8="8"
  PARTITION_SIZE_EFI_SYSTEM=33554432
    RESERVED_EBS_EFI_SYSTEM=0
       DATA_SIZE_EFI_SYSTEM=33554432
          FORMAT_EFI_SYSTEM=
       FS_FORMAT_EFI_SYSTEM=vfat
      FS_OPTIONS_EFI_SYSTEM=""
   PARTITION_NUM_EFI_SYSTEM="12"
  PARTITION_SIZE_12=33554432
    RESERVED_EBS_12=0
       DATA_SIZE_12=33554432
          FORMAT_12=
       FS_FORMAT_12=vfat
      FS_OPTIONS_12=""
   PARTITION_NUM_12="12"
  PARTITION_SIZE_ROOT_B=4294967296
    RESERVED_EBS_ROOT_B=0
       DATA_SIZE_ROOT_B=4294967296
          FORMAT_ROOT_B=
       FS_FORMAT_ROOT_B=
      FS_OPTIONS_ROOT_B=""
   PARTITION_NUM_ROOT_B="5"
  PARTITION_SIZE_5=4294967296
    RESERVED_EBS_5=0
       DATA_SIZE_5=4294967296
          FORMAT_5=
       FS_FORMAT_5=
      FS_OPTIONS_5=""
   PARTITION_NUM_5="5"
  PARTITION_SIZE_ROOT_A=4294967296
    RESERVED_EBS_ROOT_A=0
       DATA_SIZE_ROOT_A=2411724800
          FORMAT_ROOT_A=
       FS_FORMAT_ROOT_A=ext2
      FS_OPTIONS_ROOT_A=""
   PARTITION_NUM_ROOT_A="3"
  PARTITION_SIZE_3=4294967296
    RESERVED_EBS_3=0
       DATA_SIZE_3=2411724800
          FORMAT_3=
       FS_FORMAT_3=ext2
      FS_OPTIONS_3=""
   PARTITION_NUM_3="3"
  PARTITION_SIZE_STATE=2147483648
    RESERVED_EBS_STATE=0
       DATA_SIZE_STATE=2147483648
          FORMAT_STATE=
       FS_FORMAT_STATE=ext4
      FS_OPTIONS_STATE=""
   PARTITION_NUM_STATE="1"
  PARTITION_SIZE_1=2147483648
    RESERVED_EBS_1=0
       DATA_SIZE_1=2147483648
          FORMAT_1=
       FS_FORMAT_1=ext4
      FS_OPTIONS_1=""
   PARTITION_NUM_1="1"
}
write_partition_table() {
  local target="$1"
  create_image "${target}" 750860292
  local blocks
  block_size=$(blocksize "${target}")
  numsecs=$(numsectors "${target}")
  local curr=32768
  # Make sure Padding is block_size aligned.
  if [ $(( 0 & (block_size - 1) )) -gt 0 ]; then
    echo "Primary Entry Array padding is not block aligned." >&2
    exit 1
  fi
  # Create the GPT headers and tables. Pad the primary ones.
  ${GPT} create -p $(( 0 / block_size )) ${target}
  blocks=$(( 8388608 / block_size ))
  if [ $(( 8388608 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 11 -b $(( curr / block_size )) -s ${blocks} -t firmware     -l "RWFW" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 6 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-C" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 7 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-C" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 9 -b $(( curr / block_size )) -s ${blocks} -t reserved     -l "reserved" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 10 -b $(( curr / block_size )) -s ${blocks} -t reserved     -l "reserved" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 2062336 / block_size ))
  if [ $(( 2062336 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  : $(( curr += blocks * block_size ))
  blocks=$(( 16777216 / block_size ))
  if [ $(( 16777216 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 2 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-A" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 16777216 / block_size ))
  if [ $(( 16777216 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 4 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-B" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 16777216 / block_size ))
  if [ $(( 16777216 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 8 -b $(( curr / block_size )) -s ${blocks} -t data     -l "OEM" ${target}
  : $(( curr += blocks * block_size ))
  blocks=$(( 67108864 / block_size ))
  if [ $(( 67108864 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  : $(( curr += blocks * block_size ))
  blocks=$(( 33554432 / block_size ))
  if [ $(( 33554432 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 12 -b $(( curr / block_size )) -s ${blocks} -t efi     -l "EFI-SYSTEM" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 2097152 / block_size ))
  if [ $(( 2097152 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 5 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-B" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 440401920 / block_size ))
  if [ $(( 440401920 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  ${GPT} add -i 3 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-A" ${target}
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( numsecs - (curr + 24576) / block_size ))
  ${GPT} add -i 1 -b $(( curr / block_size )) -s ${blocks} -t data     -l "STATE" ${target}
  ${GPT} add -i 2 -S 0 -T 15 -P 15 ${target}
  ${GPT} add -i 4 -S 0 -T 0 -P 0 ${target}
  ${GPT} add -i 6 -S 0 -T 0 -P 0 ${target}
  ${GPT} boot -p -b $2 -i 12 ${target}
  ${GPT} add -i 12 -B 1 ${target}
  ${GPT} show ${target}
}
load_partition_vars() {
  DEFAULT_ROOTDEV=""
  PARTITION_SIZE_RWFW=8388608
    RESERVED_EBS_RWFW=0
       DATA_SIZE_RWFW=8388608
          FORMAT_RWFW=
       FS_FORMAT_RWFW=
      FS_OPTIONS_RWFW=""
   PARTITION_NUM_RWFW="11"
  PARTITION_SIZE_11=8388608
    RESERVED_EBS_11=0
       DATA_SIZE_11=8388608
          FORMAT_11=
       FS_FORMAT_11=
      FS_OPTIONS_11=""
   PARTITION_NUM_11="11"
  PARTITION_SIZE_KERN_C=1
    RESERVED_EBS_KERN_C=0
       DATA_SIZE_KERN_C=1
          FORMAT_KERN_C=
       FS_FORMAT_KERN_C=
      FS_OPTIONS_KERN_C=""
   PARTITION_NUM_KERN_C="6"
  PARTITION_SIZE_6=1
    RESERVED_EBS_6=0
       DATA_SIZE_6=1
          FORMAT_6=
       FS_FORMAT_6=
      FS_OPTIONS_6=""
   PARTITION_NUM_6="6"
  PARTITION_SIZE_ROOT_C=1
    RESERVED_EBS_ROOT_C=0
       DATA_SIZE_ROOT_C=1
          FORMAT_ROOT_C=
       FS_FORMAT_ROOT_C=
      FS_OPTIONS_ROOT_C=""
   PARTITION_NUM_ROOT_C="7"
  PARTITION_SIZE_7=1
    RESERVED_EBS_7=0
       DATA_SIZE_7=1
          FORMAT_7=
       FS_FORMAT_7=
      FS_OPTIONS_7=""
   PARTITION_NUM_7="7"
  PARTITION_SIZE_RESERVED=1
    RESERVED_EBS_RESERVED=0
       DATA_SIZE_RESERVED=1
          FORMAT_RESERVED=
       FS_FORMAT_RESERVED=
      FS_OPTIONS_RESERVED=""
   PARTITION_NUM_RESERVED="9"
  PARTITION_SIZE_9=1
    RESERVED_EBS_9=0
       DATA_SIZE_9=1
          FORMAT_9=
       FS_FORMAT_9=
      FS_OPTIONS_9=""
   PARTITION_NUM_9="9"
  PARTITION_SIZE_RESERVED=1
    RESERVED_EBS_RESERVED=0
       DATA_SIZE_RESERVED=1
          FORMAT_RESERVED=
       FS_FORMAT_RESERVED=
      FS_OPTIONS_RESERVED=""
   PARTITION_NUM_RESERVED="10"
  PARTITION_SIZE_10=1
    RESERVED_EBS_10=0
       DATA_SIZE_10=1
          FORMAT_10=
       FS_FORMAT_10=
      FS_OPTIONS_10=""
   PARTITION_NUM_10="10"
  PARTITION_SIZE_KERN_A=16777216
    RESERVED_EBS_KERN_A=0
       DATA_SIZE_KERN_A=16777216
          FORMAT_KERN_A=
       FS_FORMAT_KERN_A=
      FS_OPTIONS_KERN_A=""
   PARTITION_NUM_KERN_A="2"
  PARTITION_SIZE_2=16777216
    RESERVED_EBS_2=0
       DATA_SIZE_2=16777216
          FORMAT_2=
       FS_FORMAT_2=
      FS_OPTIONS_2=""
   PARTITION_NUM_2="2"
  PARTITION_SIZE_KERN_B=16777216
    RESERVED_EBS_KERN_B=0
       DATA_SIZE_KERN_B=16777216
          FORMAT_KERN_B=
       FS_FORMAT_KERN_B=
      FS_OPTIONS_KERN_B=""
   PARTITION_NUM_KERN_B="4"
  PARTITION_SIZE_4=16777216
    RESERVED_EBS_4=0
       DATA_SIZE_4=16777216
          FORMAT_4=
       FS_FORMAT_4=
      FS_OPTIONS_4=""
   PARTITION_NUM_4="4"
  PARTITION_SIZE_OEM=16777216
    RESERVED_EBS_OEM=0
       DATA_SIZE_OEM=16777216
          FORMAT_OEM=
       FS_FORMAT_OEM=ext4
      FS_OPTIONS_OEM=""
   PARTITION_NUM_OEM="8"
  PARTITION_SIZE_8=16777216
    RESERVED_EBS_8=0
       DATA_SIZE_8=16777216
          FORMAT_8=
       FS_FORMAT_8=ext4
      FS_OPTIONS_8=""
   PARTITION_NUM_8="8"
  PARTITION_SIZE_EFI_SYSTEM=33554432
    RESERVED_EBS_EFI_SYSTEM=0
       DATA_SIZE_EFI_SYSTEM=33554432
          FORMAT_EFI_SYSTEM=
       FS_FORMAT_EFI_SYSTEM=vfat
      FS_OPTIONS_EFI_SYSTEM=""
   PARTITION_NUM_EFI_SYSTEM="12"
  PARTITION_SIZE_12=33554432
    RESERVED_EBS_12=0
       DATA_SIZE_12=33554432
          FORMAT_12=
       FS_FORMAT_12=vfat
      FS_OPTIONS_12=""
   PARTITION_NUM_12="12"
  PARTITION_SIZE_ROOT_B=2097152
    RESERVED_EBS_ROOT_B=0
       DATA_SIZE_ROOT_B=2097152
          FORMAT_ROOT_B=
       FS_FORMAT_ROOT_B=
      FS_OPTIONS_ROOT_B=""
   PARTITION_NUM_ROOT_B="5"
  PARTITION_SIZE_5=2097152
    RESERVED_EBS_5=0
       DATA_SIZE_5=2097152
          FORMAT_5=
       FS_FORMAT_5=
      FS_OPTIONS_5=""
   PARTITION_NUM_5="5"
  PARTITION_SIZE_ROOT_A=440401920
    RESERVED_EBS_ROOT_A=0
       DATA_SIZE_ROOT_A=419430400
          FORMAT_ROOT_A=
       FS_FORMAT_ROOT_A=ext2
      FS_OPTIONS_ROOT_A=""
   PARTITION_NUM_ROOT_A="3"
  PARTITION_SIZE_3=440401920
    RESERVED_EBS_3=0
       DATA_SIZE_3=419430400
          FORMAT_3=
       FS_FORMAT_3=ext2
      FS_OPTIONS_3=""
   PARTITION_NUM_3="3"
  PARTITION_SIZE_STATE=146800640
    RESERVED_EBS_STATE=0
       DATA_SIZE_STATE=146800640
          FORMAT_STATE=
       FS_FORMAT_STATE=ext4
      FS_OPTIONS_STATE=""
   PARTITION_NUM_STATE="1"
  PARTITION_SIZE_1=146800640
    RESERVED_EBS_1=0
       DATA_SIZE_1=146800640
          FORMAT_1=
       FS_FORMAT_1=ext4
      FS_OPTIONS_1=""
   PARTITION_NUM_1="1"
}
ROOTFS_PARTITION_SIZE=4294967296
